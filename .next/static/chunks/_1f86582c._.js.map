{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/app/notes/filter/[...slag]/NotesPage.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"app\": \"NotesPage-module__qZ0DFW__app\",\n  \"button\": \"NotesPage-module__qZ0DFW__button\",\n  \"toolbar\": \"NotesPage-module__qZ0DFW__toolbar\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/app/notes/filter/%5B...slag%5D/Notes.client.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport css from './NotesPage.module.css';\r\n\r\nimport { useState } from 'react';\r\nimport { useQuery, keepPreviousData } from '@tanstack/react-query';\r\nimport { fetchNotes } from '../../lib/api';\r\nimport { useDebounce } from 'use-debounce';\r\nimport type { PaginatedNotes } from '../../types/pagination';\r\n\r\nimport NoteList from '../../components/NoteList/NoteList';\r\nimport NoteForm from '../../components/NoteForm/NoteForm';\r\nimport SearchBox from '../../components/SearchBox/SearchBox';\r\nimport Pagination from '../../components/Pagination/Pagination';\r\nimport Modal from '../../components/Modal/Modal';\r\n\r\nexport default function NotesClient() {\r\n    const [page, setPage] = useState(1);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    \r\nconst openModal = () => setIsModalOpen(true);\r\n  const closeModal = () => setIsModalOpen(false);\r\n    \r\n    const [search, setSearch] = useState(\"\");\r\n    const [debouncedSearch] = useDebounce(search, 500);\r\n\r\n      const { data, isLoading, isError, error } = useQuery<PaginatedNotes>({\r\n    queryKey: ['notes', page, debouncedSearch],\r\n    queryFn: () => fetchNotes(page, debouncedSearch),\r\n    placeholderData: keepPreviousData,\r\n      });\r\n    \r\n    const handleSearch = (value: string) => {\r\n  setSearch(value);\r\n  setPage(1);\r\n    }\r\n\r\n      return (\r\n    <div className={css.app}>\r\n\t<header className={css.toolbar}>\r\n        <SearchBox value={search} onSearch={handleSearch} />\r\n        {data && data.totalPages > 1 && (\r\n          <Pagination\r\n            currentPage={page}\r\n            totalPages={data?.totalPages}\r\n            onPageChange={setPage} />\r\n        )}\r\n        <button className={css.button} onClick={openModal}>Create note +</button>\r\n        </header>\r\n        <NoteList\r\n          notes={data?.notes || []}\r\n          isLoading={isLoading}\r\n          isError={isError} />\r\n    {isModalOpen && (\r\n        <Modal onClose={closeModal}>\r\n      <NoteForm onClose={closeModal} />\r\n        </Modal>  \r\n  )}\r\n</div> \r\n  );  \r\n}\r\n    \r\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AACA;AAAA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPA;;;;;;;;;;;AAgBe,SAAS;;IACpB,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAC;IACjC,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAC;IAEnD,MAAM,YAAY,IAAM,eAAe;IACrC,MAAM,aAAa,IAAM,eAAe;IAEtC,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,yKAAQ,EAAC;IACrC,MAAM,CAAC,gBAAgB,GAAG,IAAA,4KAAW,EAAC,QAAQ;IAE5C,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAA,0LAAQ,EAAiB;QACvE,UAAU;YAAC;YAAS;YAAM;SAAgB;QAC1C,OAAO;oCAAE,IAAM,WAAW,MAAM;;QAChC,iBAAiB,8LAAgB;IAC/B;IAEF,MAAM,eAAe,CAAC;QACxB,UAAU;QACV,QAAQ;IACN;IAEE,qBACF,6LAAC;QAAI,WAAW,+KAAG,CAAC,GAAG;;0BAC1B,6LAAC;gBAAO,WAAW,+KAAG,CAAC,OAAO;;kCACvB,6LAAC;wBAAU,OAAO;wBAAQ,UAAU;;;;;;oBACnC,QAAQ,KAAK,UAAU,GAAG,mBACzB,6LAAC;wBACC,aAAa;wBACb,UAAU,EAAE,iBAAA,2BAAA,KAAM,UAAU;wBAC5B,cAAc;;;;;;kCAElB,6LAAC;wBAAO,WAAW,+KAAG,CAAC,MAAM;wBAAE,SAAS;kCAAW;;;;;;;;;;;;0BAEnD,6LAAC;gBACC,OAAO,CAAA,iBAAA,2BAAA,KAAM,KAAK,KAAI,EAAE;gBACxB,WAAW;gBACX,SAAS;;;;;;YACd,6BACG,6LAAC;gBAAM,SAAS;0BAClB,cAAA,6LAAC;oBAAS,SAAS;;;;;;;;;;;;;;;;;AAKzB;GA5CwB;;QAQM,4KAAW;QAES,0LAAQ;;;KAVlC","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/query-core/src/hydration.ts"],"sourcesContent":["import { tryResolveSync } from './thenable'\nimport type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n  // This is only optional because older versions of Query might have dehydrated\n  // without it which we need to handle for backwards compatibility.\n  // This should be changed to required in the future.\n  dehydratedAt?: number\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  return {\n    dehydratedAt: Date.now(),\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (!shouldRedactErrors(error)) {\n          // Reject original error if it should not be redacted\n          return Promise.reject(error)\n        }\n        // If not in production, log original error before rejecting redacted error\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nfunction defaultShouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultShouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(\n    ({ queryKey, state, queryHash, meta, promise, dehydratedAt }) => {\n      const syncData = promise ? tryResolveSync(promise) : undefined\n      const rawData = state.data === undefined ? syncData?.data : state.data\n      const data = rawData === undefined ? rawData : deserializeData(rawData)\n\n      let query = queryCache.get(queryHash)\n      const existingQueryIsPending = query?.state.status === 'pending'\n      const existingQueryIsFetching = query?.state.fetchStatus === 'fetching'\n\n      // Do not hydrate if an existing query exists with newer data\n      if (query) {\n        const hasNewerSyncData =\n          syncData &&\n          // We only need this undefined check to handle older dehydration\n          // payloads that might not have dehydratedAt\n          dehydratedAt !== undefined &&\n          dehydratedAt > query.state.dataUpdatedAt\n        if (\n          state.dataUpdatedAt > query.state.dataUpdatedAt ||\n          hasNewerSyncData\n        ) {\n          // omit fetchStatus from dehydrated state\n          // so that query stays in its current fetchStatus\n          const { fetchStatus: _ignored, ...serializedState } = state\n          query.setState({\n            ...serializedState,\n            data,\n          })\n        }\n      } else {\n        // Restore query\n        query = queryCache.build(\n          client,\n          {\n            ...client.getDefaultOptions().hydrate?.queries,\n            ...options?.defaultOptions?.queries,\n            queryKey,\n            queryHash,\n            meta,\n          },\n          // Reset fetch status to idle to avoid\n          // query being stuck in fetching state upon hydration\n          {\n            ...state,\n            data,\n            fetchStatus: 'idle',\n            status: data !== undefined ? 'success' : state.status,\n          },\n        )\n      }\n\n      if (\n        promise &&\n        !existingQueryIsPending &&\n        !existingQueryIsFetching &&\n        // Only hydrate if dehydration is newer than any existing data,\n        // this is always true for new queries\n        (dehydratedAt === undefined || dehydratedAt > query.state.dataUpdatedAt)\n      ) {\n        // This doesn't actually fetch - it just creates a retryer\n        // which will re-use the passed `initialPromise`\n        // Note that we need to call these even when data was synchronously\n        // available, as we still need to set up the retryer\n        void query.fetch(undefined, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData),\n        })\n      }\n    },\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/HydrationBoundary.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  OmitKeyof,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state: DehydratedState | null | undefined\n  options?: OmitKeyof<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: OmitKeyof<\n      Exclude<HydrateOptions['defaultOptions'], undefined>,\n      'mutations'\n    >\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it must\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  const hydrationQueue: DehydratedState['queries'] | undefined =\n    React.useMemo(() => {\n      if (state) {\n        if (typeof state !== 'object') {\n          return\n        }\n\n        const queryCache = client.getQueryCache()\n        // State is supplied from the outside and we might as well fail\n        // gracefully if it has the wrong shape, so while we type `queries`\n        // as required, we still provide a fallback.\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        const queries = state.queries || []\n\n        const newQueries: DehydratedState['queries'] = []\n        const existingQueries: DehydratedState['queries'] = []\n        for (const dehydratedQuery of queries) {\n          const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n          if (!existingQuery) {\n            newQueries.push(dehydratedQuery)\n          } else {\n            const hydrationIsNewer =\n              dehydratedQuery.state.dataUpdatedAt >\n                existingQuery.state.dataUpdatedAt ||\n              (dehydratedQuery.promise &&\n                existingQuery.state.status !== 'pending' &&\n                existingQuery.state.fetchStatus !== 'fetching' &&\n                dehydratedQuery.dehydratedAt !== undefined &&\n                dehydratedQuery.dehydratedAt >\n                  existingQuery.state.dataUpdatedAt)\n\n            if (hydrationIsNewer) {\n              existingQueries.push(dehydratedQuery)\n            }\n          }\n        }\n\n        if (newQueries.length > 0) {\n          // It's actually fine to call this with queries/state that already exists\n          // in the cache, or is older. hydrate() is idempotent for queries.\n          hydrate(client, { queries: newQueries }, optionsRef.current)\n        }\n        if (existingQueries.length > 0) {\n          return existingQueries\n        }\n      }\n      return undefined\n    }, [client, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n"],"names":[],"mappings":";;;;;AACA,YAAY,WAAW;AAEvB,SAAS,eAAe;AACxB,SAAS,sBAAsB;;;;;AAoBxB,IAAM,oBAAoB;QAAC,EAChC,QAAA,EACA,UAAU,CAAC,CAAA,EACX,KAAA,EACA,WAAA,EACF,KAA8B;IAC5B,MAAM,aAAS,2MAAA,EAAe,WAAW;IAEzC,MAAM,aAAmB,uKAAA,CAAO,OAAO;IACvC,WAAW,OAAA,GAAU;IAiBrB,MAAM,iBACE,wKAAA;qDAAQ,MAAM;YAClB,IAAI,OAAO;gBACT,IAAI,OAAO,UAAU,UAAU;oBAC7B;gBACF;gBAEA,MAAM,aAAa,OAAO,aAAA,CAAc;gBAKxC,MAAM,UAAU,MAAM,OAAA,IAAW,CAAC,CAAA;gBAElC,MAAM,aAAyC,CAAC,CAAA;gBAChD,MAAM,kBAA8C,CAAC,CAAA;gBACrD,KAAA,MAAW,mBAAmB,QAAS;oBACrC,MAAM,gBAAgB,WAAW,GAAA,CAAI,gBAAgB,SAAS;oBAE9D,IAAI,CAAC,eAAe;wBAClB,WAAW,IAAA,CAAK,eAAe;oBACjC,OAAO;wBACL,MAAM,mBACJ,gBAAgB,KAAA,CAAM,aAAA,GACpB,cAAc,KAAA,CAAM,aAAA,IACrB,gBAAgB,OAAA,IACf,cAAc,KAAA,CAAM,MAAA,KAAW,aAC/B,cAAc,KAAA,CAAM,WAAA,KAAgB,cACpC,gBAAgB,YAAA,KAAiB,KAAA,KACjC,gBAAgB,YAAA,GACd,cAAc,KAAA,CAAM,aAAA;wBAE1B,IAAI,kBAAkB;4BACpB,gBAAgB,IAAA,CAAK,eAAe;wBACtC;oBACF;gBACF;gBAEA,IAAI,WAAW,MAAA,GAAS,GAAG;oBAGzB,IAAA,yLAAA,EAAQ,QAAQ;wBAAE,SAAS;oBAAW,GAAG,WAAW,OAAO;gBAC7D;gBACA,IAAI,gBAAgB,MAAA,GAAS,GAAG;oBAC9B,OAAO;gBACT;YACF;YACA,OAAO,KAAA;QACT;oDAAG;QAAC;QAAQ,KAAK;KAAC;IAEd,0KAAA;uCAAU,MAAM;YACpB,IAAI,gBAAgB;gBAClB,IAAA,yLAAA,EAAQ,QAAQ;oBAAE,SAAS;gBAAe,GAAG,WAAW,OAAO;YACjE;QACF;sCAAG;QAAC;QAAQ,cAAc;KAAC;IAE3B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { timeoutManager } from './timeoutManager'\nimport type { ManagedTimerId } from './timeoutManager'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ManagedTimerId\n  #refetchIntervalId?: ManagedTimerId\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key as keyof QueryObserverResult)\n        onPropTracked?.(key as keyof QueryObserverResult)\n        if (\n          key === 'promise' &&\n          !this.options.experimental_prefetchInRender &&\n          this.#currentThenable.status === 'pending'\n        ) {\n          this.#currentThenable.reject(\n            new Error(\n              'experimental_prefetchInRender feature flag is not enabled',\n            ),\n          )\n        }\n        return Reflect.get(target, key)\n      },\n    })\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = timeoutManager.setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = timeoutManager.setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      timeoutManager.clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      timeoutManager.clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (\n    resolveEnabled(options.enabled, query) !== false &&\n    resolveStaleTime(options.staleTime, query) !== 'static'\n  ) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/QueryErrorResetBoundary.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n"],"names":[],"mappings":";;;;;;;AACA,YAAY,WAAW;AAkDnB;;;;AArCJ,SAAS,cAA4C;IACnD,IAAI,UAAU;IACd,OAAO;QACL,YAAY,MAAM;YAChB,UAAU;QACZ;QACA,OAAO,MAAM;YACX,UAAU;QACZ;QACA,SAAS,MAAM;YACb,OAAO;QACT;IACF;AACF;AAEA,IAAM,iCAAuC,8KAAA,CAAc,YAAY,CAAC;AAIjE,IAAM,6BAA6B,IAClC,2KAAA,CAAW,8BAA8B;AAY1C,IAAM,0BAA0B;QAAC,EACtC,QAAA,EACF,KAAoC;IAClC,MAAM,CAAC,KAAK,CAAA,GAAU,yKAAA;4CAAS,IAAM,YAAY,CAAC;;IAClD,OACE,aAAA,GAAA,IAAA,6KAAA,EAAC,+BAA+B,QAAA,EAA/B;QAAwC;QACtC,UAAA,OAAO,aAAa,aAAa,SAAS,KAAK,IAAI;IAAA,CACtD;AAEJ","debugId":null}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/errorBoundaryUtils.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n"],"names":[],"mappings":";;;;;;;;;AACA,YAAY,WAAW;AACvB,SAAS,wBAAwB;;;;AAU1B,IAAM,kCAAkC,CAO7C,SAOA,uBACG;IACH,IACE,QAAQ,QAAA,IACR,QAAQ,YAAA,IACR,QAAQ,6BAAA,EACR;QAEA,IAAI,CAAC,mBAAmB,OAAA,CAAQ,GAAG;YACjC,QAAQ,YAAA,GAAe;QACzB;IACF;AACF;AAEO,IAAM,6BAA6B,CACxC,uBACG;IACG,0KAAA;gDAAU,MAAM;YACpB,mBAAmB,UAAA,CAAW;QAChC;+CAAG;QAAC,kBAAkB;KAAC;AACzB;AAEO,IAAM,cAAc;QAMzB,EACA,MAAA,EACA,kBAAA,EACA,YAAA,EACA,KAAA,EACA,QAAA,EACF,KAMM;IACJ,OACE,OAAO,OAAA,IACP,CAAC,mBAAmB,OAAA,CAAQ,KAC5B,CAAC,OAAO,UAAA,IACR,SAAA,CACE,YAAY,OAAO,IAAA,KAAS,KAAA,SAC5B,8LAAA,EAAiB,cAAc;QAAC,OAAO,KAAA;QAAO,KAAK;KAAC,CAAA;AAE1D","debugId":null}},
    {"offset": {"line": 978, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/IsRestoringProvider.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n"],"names":[],"mappings":";;;;;;;AACA,YAAY,WAAW;;;AAEvB,IAAM,qBAA2B,8KAAA,CAAc,KAAK;AAE7C,IAAM,iBAAiB,IAAY,2KAAA,CAAW,kBAAkB;AAChE,IAAM,sBAAsB,mBAAmB,QAAA","debugId":null}},
    {"offset": {"line": 997, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/suspense.ts"],"sourcesContent":["import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    const MIN_SUSPENSE_TIME_MS = 1000\n\n    const clamp = (value: number | 'static' | undefined) =>\n      value === 'static'\n        ? value\n        : Math.max(value ?? MIN_SUSPENSE_TIME_MS, MIN_SUSPENSE_TIME_MS)\n\n    const originalStaleTime = defaultedOptions.staleTime\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => clamp(originalStaleTime(...args))\n        : clamp(originalStaleTime)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(\n        defaultedOptions.gcTime,\n        MIN_SUSPENSE_TIME_MS,\n      )\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n"],"names":[],"mappings":";;;;;;;;;;;;;AAUO,IAAM,sBAAsB,CAMjC,QACA,QACG,MAAM,KAAA,CAAM,IAAA,KAAS,KAAA;AAEnB,IAAM,uBAAuB,CAClC,qBACG;IACH,IAAI,iBAAiB,QAAA,EAAU;QAG7B,MAAM,uBAAuB;QAE7B,MAAM,QAAQ,CAAC,QACb,UAAU,WACN,QACA,KAAK,GAAA,sCAAI,QAAS,sBAAsB,oBAAoB;QAElE,MAAM,oBAAoB,iBAAiB,SAAA;QAC3C,iBAAiB,SAAA,GACf,OAAO,sBAAsB,aACzB;;gBAAI;;mBAAS,MAAM,kBAAkB,GAAG,IAAI,CAAC;YAC7C,MAAM,iBAAiB;QAE7B,IAAI,OAAO,iBAAiB,MAAA,KAAW,UAAU;YAC/C,iBAAiB,MAAA,GAAS,KAAK,GAAA,CAC7B,iBAAiB,MAAA,EACjB;QAEJ;IACF;AACF;AAEO,IAAM,YAAY,CACvB,QACA,cACG,OAAO,SAAA,IAAa,OAAO,UAAA,IAAc,CAAC;AAExC,IAAM,gBAAgB,CAC3B,kBAGA,8EACG,iBAAkB,QAAA,KAAY,OAAO,SAAA;AAEnC,IAAM,kBAAkB,CAO7B,kBAOA,UACA,qBAEA,SAAS,eAAA,CAAgB,gBAAgB,EAAE,KAAA,CAAM,MAAM;QACrD,mBAAmB,UAAA,CAAW;IAChC,CAAC","debugId":null}},
    {"offset": {"line": 1038, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { isServer, noop, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './IsRestoringProvider'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const client = useQueryClient(queryClient)\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":[],"mappings":";;;;AA2CM,QAAQ,IAAI,aAAa;;AA1C/B,YAAY,WAAW;;AAEvB,SAAS,UAAU,MAAM,qBAAqB;AAC9C,SAAS,sBAAsB;AAC/B,SAAS,kCAAkC;AAC3C;AAKA,SAAS,sBAAsB;AAC/B;;;;;;;;;AAcO,SAAS,aAOd,OAAA,EAOA,QAAA,EACA,WAAA,EACoC;QAclC,4JAuFA;IApGF,wCAA2C;QACzC,IAAI,OAAO,YAAY,YAAY,MAAM,OAAA,CAAQ,OAAO,GAAG;YACzD,MAAM,IAAI,MACR;QAEJ;IACF;IAEA,MAAM,kBAAc,2MAAA,CAAe;IACnC,MAAM,yBAAqB,2NAAA,CAA2B;IACtD,MAAM,aAAS,2MAAA,EAAe,WAAW;IACzC,MAAM,mBAAmB,OAAO,mBAAA,CAAoB,OAAO;gDAElD,iBAAA,CAAkB,EAAE,OAAA,uKAAiB,yBAAA,oMAC5C;IAGF,IAAI,QAAQ,IAAI,aAAa,WAAc;QACzC,IAAI,CAAC,iBAAiB,OAAA,EAAS;YAC7B,QAAQ,KAAA,CACN,IAA8B,OAA1B,iBAAiB,SAAS,EAAA;QAElC;IACF;IAGA,iBAAiB,kBAAA,GAAqB,cAClC,gBACA;IAEJ,IAAA,sMAAA,EAAqB,gBAAgB;IACrC,IAAA,2NAAA,EAAgC,kBAAkB,kBAAkB;IAEpE,IAAA,sNAAA,EAA2B,kBAAkB;IAG7C,MAAM,kBAAkB,CAAC,OACtB,aAAA,CAAc,EACd,GAAA,CAAI,iBAAiB,SAAS;IAEjC,MAAM,CAAC,QAAQ,CAAA,GAAU,yKAAA;iCACvB,IACE,IAAI,SACF,QACA;;IAKN,MAAM,SAAS,SAAS,mBAAA,CAAoB,gBAAgB;IAE5D,MAAM,kBAAkB,CAAC,eAAe,QAAQ,UAAA,KAAe;IACzD,qLAAA,CACE,4KAAA;yDACJ,CAAC,kBAAkB;YACjB,MAAM,cAAc,kBAChB,SAAS,SAAA,CAAU,mMAAA,CAAc,UAAA,CAAW,aAAa,CAAC,IAC1D,kLAAA;YAIJ,SAAS,YAAA,CAAa;YAEtB,OAAO;QACT;wDACA;QAAC;QAAU,eAAe;KAAA;6CAE5B,IAAM,SAAS,gBAAA,CAAiB;;6CAChC,IAAM,SAAS,gBAAA,CAAiB;;IAG5B,0KAAA;kCAAU,MAAM;YACpB,SAAS,UAAA,CAAW,gBAAgB;QACtC;iCAAG;QAAC;QAAkB,QAAQ;KAAC;IAG/B,QAAI,+LAAA,EAAc,kBAAkB,MAAM,GAAG;QAC3C,UAAM,iMAAA,EAAgB,kBAAkB,UAAU,kBAAkB;IACtE;IAGA,QACE,uMAAA,EAAY;QACV;QACA;QACA,cAAc,iBAAiB,YAAA;QAC/B,OAAO,OACJ,aAAA,CAAc,EACd,GAAA,CAKC,iBAAiB,SAAS;QAC9B,UAAU,iBAAiB,QAAA;IAC7B,CAAC,GACD;QACA,MAAM,OAAO,KAAA;IACf;;iDAES,iBAAA,CAAkB,EAAE,OAAA,wKAAiB,wBAAA,mMAC5C,kBACA;IAGF,IACE,iBAAiB,6BAAA,IACjB,CAAC,sLAAA,QACD,2LAAA,EAAU,QAAQ,WAAW,GAC7B;YAGkE,kGAAA;;QAFlE,MAAM,UAAU,kBAAA,2GAAA;YAEZ,iMAAA,EAAgB,kBAAkB,UAAU,kBAAkB,IAAA,oCAEvD,aAAA,CAAc,EAAE,GAAA,CAAI,iBAAiB,SAAS,CAAG,8DAAxD,0BAAwD,OAAA;QAE5D,oBAAA,8BAAA,QAAS,KAAA,CAAM,kLAAI,EAAE,OAAA,CAAQ,MAAM;YAEjC,SAAS,YAAA,CAAa;QACxB,CAAC;IACH;IAGA,OAAO,CAAC,iBAAiB,mBAAA,GACrB,SAAS,WAAA,CAAY,MAAM,IAC3B;AACN","debugId":null}},
    {"offset": {"line": 1140, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/%40tanstack/react-query/src/useQuery.ts"],"sourcesContent":["'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  NoInfer,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n"],"names":[],"mappings":";;;;;AACA,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB;;;;AA+CtB,SAAS,SAAS,OAAA,EAA0B,WAAA,EAA2B;IAC5E,WAAO,kMAAA,EAAa,SAAS,mMAAA,EAAe,WAAW;AACzD","debugId":null}},
    {"offset": {"line": 1159, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/use-debounce/dist/index.module.js","sources":["file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/use-debounce/src/useDebouncedCallback.ts","file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/use-debounce/src/useDebounce.ts","file:///C:/Projects/Next.js/07-routing-nextjs/node_modules/use-debounce/src/useThrottledCallback.ts"],"sourcesContent":["import {\n  useRef,\n  useEffect,\n  useMemo,\n  type Dispatch,\n  type SetStateAction,\n} from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.isPending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(\n  func: T,\n  wait?: number,\n  options?: Options,\n  forceUpdate?: Dispatch<SetStateAction<object>>\n): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const firstInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      firstInvokeTime.current = firstInvokeTime.current || time;\n\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n\n      if (leading && firstInvokeTime.current === lastInvokeTime.current) {\n        notifyManuallyTimerExpired();\n      }\n\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const notifyManuallyTimerExpired = () => {\n      if (forceUpdate) {\n        forceUpdate({});\n      }\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      const hadTimer = timerId.current;\n      if (hadTimer) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n\n      // Notify React to re-render when cancel is called and there was an active timer\n      if (hadTimer && forceUpdate) {\n        forceUpdate({});\n      }\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n    forceUpdate,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const activeValue = useRef(value);\n  const [, forceUpdate] = useState({});\n  const debounced = useDebouncedCallback(\n    useCallback(\n      (value: T) => {\n        activeValue.current = value;\n        forceUpdate({});\n      },\n      [forceUpdate]\n    ),\n    delay,\n    options,\n    forceUpdate\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [activeValue.current as T, debounced];\n}\n","import useDebouncedCallback, {\n  CallOptions,\n  DebouncedState,\n} from './useDebouncedCallback';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame).\n *\n * The throttled function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the throttled function.\n *\n * Subsequent calls to the throttled function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * const scrollHandler = useThrottledCallback(updatePosition, 100)\n * window.addEventListener('scroll', scrollHandler)\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n * <button onClick={throttled}>click</button>\n *\n * // Cancel the trailing throttled invocation.\n * window.addEventListener('popstate', throttled.cancel);\n */\nexport default function useThrottledCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(\n  func: T,\n  wait: number,\n  { leading = true, trailing = true }: CallOptions = {}\n): DebouncedState<T> {\n  return useDebouncedCallback(func, wait, {\n    maxWait: wait,\n    leading,\n    trailing,\n  });\n}\n"],"names":["useDebouncedCallback","func","wait","options","forceUpdate","_this","this","lastCallTime","useRef","lastInvokeTime","firstInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","current","isClientSide","window","useRAF","TypeError","leading","trailing","maxing","debounceOnServer","maxWait","Math","max","useEffect","debounced","useMemo","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","trailingEdge","timerExpired","Date","now","notifyManuallyTimerExpired","timeWaiting","remainingWait","min","isInvoking","slice","call","arguments","cancel","hadTimer","clearTimeout","isPending","flush","valueEquality","left","right","useDebounce","value","delay","eq","equalityFn","activeValue","useState","useCallback","previousValue","useThrottledCallback","_temp","_ref","_ref$leading","_ref$trailing"],"mappings":"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","debugId":null}}]
}